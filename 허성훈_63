class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid.empty()) {
            return 0;
        }
        
        int m = obstacleGrid.size();
        int n = obstacleGrid.at(0).size();
        unsigned int path[m][n];
        
        memset(path, 0, sizeof(path));
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(i == 0 && j == 0) {
                    path[i][j] = obstacleGrid.at(i).at(j) == 0 ? 1 : 0;
                    continue;                    
                }
                if(i == 0) {
                    if(obstacleGrid.at(i).at(j) == 0 && path[i][j-1] == 1) {
                        path[i][j] = 1;
                    }
                    continue;
                }
                if(j == 0) {
                    if(obstacleGrid.at(i).at(j) == 0 && path[i-1][j] == 1) {
                        path[i][j] = 1;
                    }
                    continue;
                }
                if(obstacleGrid.at(i).at(j) == 1) {
                    continue;
                }
                path[i][j] = path[i-1][j] + path[i][j-1];
            }
        }
        return path[m-1][n-1];
    }
};
